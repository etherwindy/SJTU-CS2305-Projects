#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovl Stack, %esp  	# Set up stack pointer
	irmovl Stack, %ebp  	# Set up base pointer

	# Set up arguments for copy function and then invoke it
	irmovl $63, %eax		# src and dst have 63 elements
	pushl %eax
	irmovl dest, %eax	# dst array
	pushl %eax
	irmovl src, %eax	# src array
	pushl %eax
	call ncopy		 
	halt			# should halt with num nonzeros in %eax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
#	xorl %eax,%eax		# count = 0;
	iaddl $-8, %edx		# len = len - 8;
	andl %edx,%edx		# len < 0?
	jl Remain		# if so, goto Remain:

Loop:	mrmovl (%ebx), %esi	# read val from src
	mrmovl 4(%ebx), %edi	# read next val from src
	rmmovl %esi, (%ecx)	# store val to dst
	andl %esi, %esi		# val <= 0?
	jle LNpos1		# if so, goto LNpos1:
	iaddl $1, %eax		# count++
LNpos1: rmmovl %edi, 4(%ecx)	# store val to dst
	andl %edi, %edi		# val <= 0?
	jle LNpos2		# if so, goto LNpos2:
	iaddl $1, %eax		# count++
LNpos2: mrmovl 8(%ebx), %esi	# read val from src
	mrmovl 12(%ebx), %edi	# read next val from src
	rmmovl %esi, 8(%ecx)	# store val to dst
	andl %esi, %esi		# val <= 0?
	jle LNpos3		# if so, goto LNpos3:
	iaddl $1, %eax		# count++
LNpos3: rmmovl %edi, 12(%ecx)	# store val to dst
	andl %edi, %edi		# val <= 0?
	jle LNpos4		# if so, goto LNpos4:
	iaddl $1, %eax		# count++
LNpos4:	mrmovl 16(%ebx), %esi	# read val from src
	mrmovl 20(%ebx), %edi	# read next val from src
	rmmovl %esi, 16(%ecx)	# store val to dst
	andl %esi, %esi		# val <= 0?
	jle LNpos5		# if so, goto LNpos5:
	iaddl $1, %eax		# count++
LNpos5: rmmovl %edi,20(%ecx)	# store val to dst
	andl %edi, %edi		# val <= 0?
	jle LNpos6		# if so, goto LNpos6:
	iaddl $1, %eax		# count++
LNpos6: mrmovl 24(%ebx), %esi	# read val from src
	mrmovl 28(%ebx), %edi	# read next val from src
	rmmovl %esi, 24(%ecx)	# store val to dst
	andl %esi, %esi		# val <= 0?
	jle LNpos7		# if so, goto LNpos7:
	iaddl $1, %eax		# count++
LNpos7: rmmovl %edi, 28(%ecx)	# store val to dst
	andl %edi, %edi		# val <= 0?
	jle Next		# if so, goto Next;
	iaddl $1, %eax		# count++

Next:	iaddl $-8, %edx	# len-=8
	iaddl $32, %ebx		# src+=8
	iaddl $32, %ecx		# dst+=8
	andl %edx,%edx		# len >= 0?
	jge Loop		# if so, goto Loop:

# Maybe just remain less than 8
Remain:	iaddl $5, %edx
	jl Left
	jg Right
	je R3

Left:	iaddl $1, %edx
	je R2
	iaddl $1, %edx
	je R1
	jmp Done

Right:	iaddl $-2, %edx
	je R5
	jl R4
	iaddl $-2, %edx
	je R7
	jmp R6

R7:	mrmovl 24(%ebx), %esi
	andl %esi, %esi
	rmmovl %esi, 24(%ecx)
	
R6:	mrmovl 20(%ebx), %esi
	jle R61
	iaddl $1, %eax
	
R61:	rmmovl %esi, 20(%ecx)
	andl %esi, %esi

R5:	mrmovl 16(%ebx), %esi
	jle R51
	iaddl $1, %eax

R51:	rmmovl %esi, 16(%ecx)
	andl %esi, %esi

R4:	mrmovl 12(%ebx), %esi
	jle R41
	iaddl $1, %eax
		
R41:	rmmovl %esi, 12(%ecx)
	andl %esi, %esi
	
R3:	mrmovl 8(%ebx), %esi
	jle R31
	iaddl $1, %eax
	
R31:	rmmovl %esi, 8(%ecx)
	andl %esi, %esi

R2:	mrmovl 4(%ebx), %esi
	jle R21
	iaddl $1, %eax

R21:	rmmovl %esi, 4(%ecx)
	andl %esi, %esi

R1:	mrmovl (%ebx), %esi
	jle R11
	iaddl $1, %eax
	
R11:	rmmovl %esi, (%ecx)
	andl %esi, %esi
	jle Done
	iaddl $1, %eax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */

EndFun:

###############################
# Source and destination blocks 
###############################
	.align 4
src:
	.long -1
	.long -2
	.long -3
	.long -4
	.long -5
	.long -6
	.long 7
	.long 8
	.long -9
	.long 10
	.long 11
	.long -12
	.long -13
	.long 14
	.long -15
	.long 16
	.long -17
	.long 18
	.long -19
	.long -20
	.long -21
	.long -22
	.long 23
	.long 24
	.long -25
	.long 26
	.long 27
	.long -28
	.long 29
	.long 30
	.long -31
	.long 32
	.long -33
	.long -34
	.long -35
	.long 36
	.long -37
	.long -38
	.long 39
	.long -40
	.long -41
	.long -42
	.long 43
	.long 44
	.long 45
	.long 46
	.long 47
	.long 48
	.long 49
	.long -50
	.long 51
	.long -52
	.long 53
	.long 54
	.long 55
	.long 56
	.long -57
	.long 58
	.long 59
	.long -60
	.long 61
	.long -62
	.long -63
	.long 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.long 0xbcdefa
dest:
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
Postdest:
	.long 0xdefabc

.align 4
# Run time stack
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0

Stack:
